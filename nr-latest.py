import sys
import threading
import webbrowser
import configparser
import argparse
import shutil
from flask import Flask, render_template, send_from_directory, abort
from PySide6.QtWidgets import QApplication, QMainWindow
from PySide6.QtCore import QTimer
from PySide6.QtGui import QKeyEvent
import os
import subprocess
import importlib.util
import glob
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWidgets import QVBoxLayout, QWidget
import platform
import multiprocessing
import time

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º templates –∏ static
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ exe
if getattr(sys, 'frozen', False):
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º _internal
    BASE_DIR = os.path.dirname(sys.executable)
    INTERNAL_DIR = os.path.join(BASE_DIR, '_internal')
    TEMPLATES_DIR = os.path.join(INTERNAL_DIR, 'templates')
    STATIC_DIR = os.path.join(INTERNAL_DIR, 'static')
    CONFIG_DIR = os.path.join(INTERNAL_DIR, 'bin', 'configs')
    PROJECT_JSON = os.path.join(INTERNAL_DIR, 'project.json')
else:
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
    TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
    STATIC_DIR = os.path.join(BASE_DIR, 'static')
    CONFIG_DIR = os.path.join(BASE_DIR, 'bin', 'configs')
    PROJECT_JSON = os.path.join(BASE_DIR, 'project.json')

print(f"üìÅ BASE_DIR: {BASE_DIR}")
print(f"üìÅ TEMPLATES_DIR: {TEMPLATES_DIR}")
print(f"üìÅ STATIC_DIR: {STATIC_DIR}")
print(f"üìÅ CONFIG_DIR: {CONFIG_DIR}")
print(f"üìÅ PROJECT_JSON: {PROJECT_JSON}")

# –ß—Ç–µ–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
config = configparser.ConfigParser()
config_file = os.path.join(CONFIG_DIR, 'runtime_conf.ini')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if os.path.exists(config_file):
    config.read(config_file, encoding='utf-8')
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}")
else:
    print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
    print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

potato_settings = config.getboolean('Window', 'Potato', fallback=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
def get_gpu_type():
    try:
        if platform.system() == "Windows":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU
            result = subprocess.run(
                ["powershell", "-Command", "Get-WmiObject -Class Win32_VideoController | Select-Object Name | ConvertTo-Json"],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode == 0:
                gpu_info = result.stdout.strip()
                gpu_name = gpu_info.lower()
                
                if "nvidia" in gpu_name:
                    return "nvidia"
                elif "amd" in gpu_name or "radeon" in gpu_name:
                    return "amd"
                elif "intel" in gpu_name:
                    return "intel"
                else:
                    return "intel"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            else:
                return "intel"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            # –î–ª—è Linux –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
            try:
                result = subprocess.run(["lspci"], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    gpu_info = result.stdout.lower()
                    if "nvidia" in gpu_info:
                        return "nvidia"
                    elif "amd" in gpu_info or "radeon" in gpu_info:
                        return "amd"
                    elif "intel" in gpu_info:
                        return "intel"
            except:
                pass
            return "intel"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except:
        return "intel"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
gpu_type = get_gpu_type()

if gpu_type == "nvidia":
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--enable-gpu --enable-accelerated-video-decode --disable-gpu-sandbox"
    print("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è NVIDIA GPU —Å –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º")
    os.environ["QT_OPENGL"] = "desktop"
elif gpu_type == "amd":
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--enable-gpu --enable-accelerated-video-decode --disable-gpu-sandbox"
    print("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AMD GPU —Å –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º")
elif gpu_type == "intel":
    # Intel GPU —Å OpenGL —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--enable-gpu --use-gl=desktop --disable-gpu-sandbox --enable-accelerated-video-decode"
    os.environ["QT_QUICK_BACKEND"] = "software"
    os.environ["QT_OPENGL"] = "desktop"
    print("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Intel GPU —Å OpenGL —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º")
else:  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--disable-gpu --disable-software-rasterizer"
    os.environ["QT_QUICK_BACKEND"] = "software"
    print("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞)")

def create_new_project():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç NovelForge —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ NovelForge...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if getattr(sys, 'frozen', False):
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ exe, —Å–æ–∑–¥–∞–µ–º –≤ –ø–∞–ø–∫–µ —Å exe
        project_base = os.path.dirname(sys.executable)
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        project_base = BASE_DIR
    
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_base}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        os.path.join(project_base, 'templates'),
        os.path.join(project_base, 'templates', 'game'),
        os.path.join(project_base, 'static'),
        os.path.join(project_base, 'static', 'sfx'),
        os.path.join(project_base, 'static', 'sprites'),
        os.path.join(project_base, 'static', 'media'),
        os.path.join(project_base, 'bin'),
        os.path.join(project_base, 'bin', 'configs'),
        os.path.join(project_base, 'bin', 'modules')
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config_content = """[Window]
Potato = True
Width = 1280
Height = 720
Fullscreen = False

[Server]
Host = 127.0.0.1
Port = 5000
Debug = True

[Graphics]
OpenGL = True
HardwareAcceleration = True
VideoCodec = auto

[Audio]
MusicVolume = 0.7
SFXVolume = 0.8
AutoPlay = True

[System]
AutoSave = True
LogLevel = INFO

[Runtime]
mode = both
server_console = False
"""
    
    config_file = os.path.join(project_base, 'bin', 'configs', 'runtime_conf.ini')
    with open(config_file, 'w', encoding='utf-8') as f:
        f.write(config_content)
    print(f"‚öôÔ∏è –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π index.html
    index_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NovelForge - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <div class="menu">
            <h1>üéÆ NovelForge</h1>
            <div class="menu-buttons">
                <button onclick="startGame()" class="menu-btn">üé¨ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£</button>
                <button onclick="openSettings()" class="menu-btn">‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò</button>
                <button onclick="exitGame()" class="menu-btn">üö™ –í–´–•–û–î</button>
            </div>
        </div>
    </div>
    
    <script>
        function startGame() {
            window.location.href = '/game?startgame';
        }
        
        function openSettings() {
            window.location.href = '/settings';
        }
        
        function exitGame() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                window.location.href = '/system/exit';
            }
        }
    </script>
</body>
</html>"""
    
    index_file = os.path.join(project_base, 'templates', 'index.html')
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write(index_content)
    print(f"üìÑ –°–æ–∑–¥–∞–Ω index.html: {index_file}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π CSS
    css_content = """body {
    margin: 0;
    padding: 0;
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.container {
    text-align: center;
    color: white;
}

.menu h1 {
    font-size: 3em;
    margin-bottom: 2em;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

.menu-buttons {
    display: flex;
    flex-direction: column;
    gap: 1em;
}

.menu-btn {
    padding: 1em 2em;
    font-size: 1.2em;
    border: none;
    border-radius: 10px;
    background: rgba(255,255,255,0.2);
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
}

.menu-btn:hover {
    background: rgba(255,255,255,0.3);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}"""
    
    css_file = os.path.join(project_base, 'static', 'style.css')
    with open(css_file, 'w', encoding='utf-8') as f:
        f.write(css_content)
    print(f"üé® –°–æ–∑–¥–∞–Ω style.css: {css_file}")
    
    print("\nüéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python run_runtime.py")

def create_minimal_project():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç NovelForge —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ NovelForge...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        'templates',
        'static',
        'bin/configs'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config_content = """[Window]
Potato = True
Width = 1280
Height = 720
Fullscreen = False

[Server]
Host = 127.0.0.1
Port = 5000
Debug = True

[Runtime]
mode = both
server_console = False
"""
    
    with open('bin/configs/runtime_conf.ini', 'w', encoding='utf-8') as f:
        f.write(config_content)
    print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: bin/configs/runtime_conf.ini")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π index.html
    index_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>NovelForge</title>
    <style>
        body { margin: 0; padding: 0; font-family: Arial; background: linear-gradient(45deg, #667eea, #764ba2); color: white; height: 100vh; display: flex; align-items: center; justify-content: center; }
        .container { text-align: center; }
        h1 { font-size: 3em; margin-bottom: 30px; }
        button { padding: 15px 30px; font-size: 1.2em; background: rgba(255,255,255,0.2); border: 2px solid white; color: white; cursor: pointer; margin: 10px; border-radius: 10px; }
        button:hover { background: rgba(255,255,255,0.3); }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ NovelForge</h1>
        <button onclick="startGame()">üé¨ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£</button>
        <button onclick="exitGame()">üö™ –í–´–•–û–î</button>
    </div>
    <script>
        function startGame() { window.location.href = '/game'; }
        function exitGame() { if(confirm('–í—ã–π—Ç–∏?')) window.close(); }
    </script>
</body>
</html>"""
    
    with open('templates/index.html', 'w', encoding='utf-8') as f:
        f.write(index_content)
    print("üìÑ –°–æ–∑–¥–∞–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: templates/index.html")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π game.html
    game_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>NovelForge - –ò–≥—Ä–∞</title>
    <style>
        body { margin: 0; padding: 20px; font-family: Arial; background: linear-gradient(45deg, #667eea, #764ba2); color: white; min-height: 100vh; }
        .game-content { max-width: 800px; margin: 0 auto; text-align: center; }
        h1 { font-size: 2.5em; margin-bottom: 20px; }
        p { font-size: 1.2em; margin-bottom: 30px; }
        .feature { background: rgba(255,255,255,0.1); padding: 20px; margin: 20px 0; border-radius: 10px; }
        button { padding: 12px 24px; font-size: 1em; background: rgba(255,255,255,0.2); border: 2px solid white; color: white; cursor: pointer; margin: 10px; border-radius: 10px; }
        button:hover { background: rgba(255,255,255,0.3); }
    </style>
</head>
<body>
    <div class="game-content">
        <h1>üéÆ NovelForge Runtime Engine</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–µ–ª!</p>
        
        <div class="feature">
            <h3>üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω</h3>
            <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É templates/ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω</p>
        </div>
        
        <div class="feature">
            <h3>üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è</h3>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞</p>
        </div>
        
        <div class="feature">
            <h3>üîä –ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ</h3>
            <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞, –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –≤–∏–¥–µ–æ</p>
        </div>
        
        <button onclick="showMessage()">üì¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
        <button onclick="goBack()">üîô –ù–∞–∑–∞–¥</button>
    </div>
    
    <script>
        function showMessage() {
            alert('üéâ –î–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        }
        
        function goBack() {
            window.location.href = '/';
        }
    </script>
</body>
</html>"""
    
    with open('templates/game.html', 'w', encoding='utf-8') as f:
        f.write(game_content)
    print("üéÆ –°–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–π–ª: templates/game.html")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π README
    readme_content = """# NovelForge Runtime Engine - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `run_runtime.py`
2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ `http://localhost:5000`
3. –ù–∞–∂–º–∏—Ç–µ "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£"

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

```
NovelForge/
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îú‚îÄ‚îÄ index.html     # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚îÇ   ‚îî‚îÄ‚îÄ game.html      # –ò–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞
‚îú‚îÄ‚îÄ static/            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
‚îú‚îÄ‚îÄ bin/configs/       # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
‚îî‚îÄ‚îÄ run_runtime.py     # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
```

## üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–î–æ–±–∞–≤–ª—è–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ `templates/` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω.

---
–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é NovelForge Runtime Engine
"""
    
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    print("üìñ –°–æ–∑–¥–∞–Ω README: README.md")
    
    print("\n‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç NovelForge —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print("üéØ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python run_runtime.py")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞: http://localhost:5000")
    
    return True

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__, template_folder=TEMPLATES_DIR, static_folder=STATIC_DIR)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∏–∑ –ø–∞–ø–∫–∏ modules
def load_modules(app, modules_dir='bin/modules'):
    if getattr(sys, 'frozen', False):
        # –ï—Å–ª–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ, –∏—â–µ–º –º–æ–¥—É–ª–∏ –≤ _internal
        modules_path = os.path.join(INTERNAL_DIR, 'bin', 'modules')
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
        modules_path = os.path.join(BASE_DIR, modules_dir)
    
    loaded_modules = 0
    
    if os.path.exists(modules_path):
        for module_file in glob.glob(os.path.join(modules_path, '*.py')):
            module_name = os.path.splitext(os.path.basename(module_file))[0]
            spec = importlib.util.spec_from_file_location(module_name, module_file)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            if hasattr(module, 'register'):
                module.register(app)
                loaded_modules += 1
                print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: {module_name}")
    
    print(f"\nüì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {loaded_modules}")

load_modules(app)

@app.route('/')
def index():
    try:
        return render_template('index.html')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ index.html: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return """
        <!DOCTYPE html>
        <html>
        <head><title>NovelForge</title></head>
        <body>
            <h1>üéÆ NovelForge Runtime Engine</h1>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª templates/index.html –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.</p>
        </body>
        </html>
        """

@app.route('/game')
def game():
    try:
        return render_template('game.html')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ game.html: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return """
        <!DOCTYPE html>
        <html>
        <head><title>NovelForge - –ò–≥—Ä–∞</title></head>
        <body>
            <h1>üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞</h1>
            <p>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª templates/game.html –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω—ã.</p>
            <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        </body>
        </html>
        """

@app.route('/game/<path:game_file>')
def game_file(game_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ game"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ templates/game/
        template_path = f'game/{game_file}'
        return render_template(template_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ {game_file}: {e}")
        abort(404)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ª—é–±–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∞–ø–æ–∫)
@app.route('/templates/<path:template_path>')
def render_any_template(template_path):
    if not template_path.endswith('.html'):
        abort(404)
    try:
        return render_template(template_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞ {template_path}: {e}")
        abort(404)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ—Ç–¥–∞—á–∞ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∞–ø–æ–∫)
@app.route('/static/<path:filename>')
def serve_static(filename):
    try:
        file_path = os.path.join(STATIC_DIR, filename)
        if not os.path.isfile(file_path):
            print(f"‚ùå –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            abort(404)
        return send_from_directory(STATIC_DIR, filename)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ {filename}: {e}")
        abort(404)

# API –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
@app.route('/system/exit', methods=['GET', 'POST'])
def system_exit():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    try:
        print("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
        threading.Timer(0.5, lambda: os._exit(0)).start()
        return {"status": "success", "message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ"}, 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}, 500

# API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
@app.route('/config/get', methods=['GET'])
def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config_data = {}
        for section in config.sections():
            config_data[section] = dict(config[section])
        return {"status": "success", "config": config_data}, 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.route('/config/set', methods=['POST'])
def set_config():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from flask import request
        data = request.get_json()
        
        if not data or 'section' not in data or 'key' not in data or 'value' not in data:
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}, 400
        
        section = data['section']
        key = data['key']
        value = data['value']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
        if not config.has_section(section):
            config.add_section(section)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        config.set(section, key, str(value))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('bin/configs/runtime_conf.ini', 'w', encoding='utf-8') as configfile:
            config.write(configfile)
        
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [{section}] {key} = {value}")
        return {"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}, 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.route('/config/section/<section_name>', methods=['GET'])
def get_config_section(section_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏"""
    try:
        if not config.has_section(section_name):
            return {"status": "error", "message": "–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, 404
        
        section_data = dict(config[section_name])
        return {"status": "success", "section": section_name, "data": section_data}, 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.route('/system/gpu-info', methods=['GET'])
def get_gpu_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU"""
    try:
        gpu_type = get_gpu_type()
        renderer_info = {
            "nvidia": {
                "name": "NVIDIA GPU",
                "renderer": "hardware",
                "description": "–ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA"
            },
            "amd": {
                "name": "AMD GPU", 
                "renderer": "hardware",
                "description": "–ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenCL"
            },
            "intel": {
                "name": "Intel GPU",
                "renderer": "opengl",
                "description": "OpenGL —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            },
            "unknown": {
                "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
                "renderer": "software",
                "description": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥"
            }
        }
        
        info = renderer_info.get(gpu_type, renderer_info["unknown"])
        info["type"] = gpu_type
        
        return {"status": "success", "gpu": info}, 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
        return {"status": "error", "message": str(e)}, 500

def run_flask():
    host = config.get('Server', 'host', fallback='127.0.0.1')
    port = config.getint('Server', 'port', fallback=5000)
    debug = config.getboolean('Server', 'debug', fallback=True)
    app.run(host=host, port=port, debug=debug, use_reloader=False)

# PySide6 –æ–∫–Ω–æ
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        w = config['Window']
        self.setWindowTitle(w.get('title', 'NovelForge'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        fullscreen = w.getboolean('fullscreen', False)
        
        if fullscreen:
            # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            self.showFullScreen()
            print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        else:
            # –û–∫–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            self.setGeometry(
                int(w.get('x', 100)),
                int(w.get('y', 100)),
                int(w.get('width', 1200)),
                int(w.get('height', 800))
            )
            print(f"ü™ü –ó–∞–ø—É—Å–∫ –≤ –æ–∫–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ: {w.get('width', 1200)}x{w.get('height', 800)}")
        
        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setContentsMargins(0, 0, 0, 0)
        self.url = w.get('url', f"http://{config.get('Server', 'host', fallback='127.0.0.1')}:{config.get('Server', 'port', fallback='5000')}/")
        
        # –°–æ–∑–¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–µ–æ
        self.web_view = QWebEngineView()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∏–¥–µ–æ –∏ –º–µ–¥–∏–∞
        self.setup_web_engine_settings()
        
        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É –≤–∏–¥–∂–µ—Ç–∞
        self.web_view.setContentsMargins(0, 0, 0, 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π html
        self.web_view.setHtml(self.get_base_html())
        
        # –†–∞–∑–º–µ—â–∞–µ–º –µ–≥–æ –≤ –æ–∫–Ω–µ
        central_widget = QWidget()
        central_widget.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã layout
        layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –≤–∏–¥–∂–µ—Ç–∞–º–∏
        layout.addWidget(self.web_view)
        self.setCentralWidget(central_widget)
        
        # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π url
        QTimer.singleShot(2000, self.load_main_url)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.is_fullscreen = fullscreen

    def setup_web_engine_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebEngine –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∏–¥–µ–æ –∏ –º–µ–¥–∏–∞"""
        try:
            from PySide6.QtWebEngineCore import QWebEngineSettings, QWebEngineProfile
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            profile = self.web_view.page().profile()
            settings = self.web_view.page().settings()
            
            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–¥–µ–æ –∏ –º–µ–¥–∏–∞
            settings.setAttribute(QWebEngineSettings.WebAttribute.PlaybackRequiresUserGesture, False)
            settings.setAttribute(QWebEngineSettings.WebAttribute.PlaybackRequiresUserGesture, False)
            settings.setAttribute(QWebEngineSettings.WebAttribute.PluginsEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessRemoteUrls, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessFileUrls, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.AllowRunningInsecureContent, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.AllowGeolocationOnInsecureOrigins, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.DnsPrefetchEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.FocusOnNavigationEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.FullScreenSupportEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.HyperlinkAuditingEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanAccessClipboard, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanOpenWindows, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanPaste, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.LocalStorageEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.ScreenCaptureEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.ScrollAnimatorEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.SpatialNavigationEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.WebGLEnabled, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.WebSecurityEnabled, False)
            
            print("‚úÖ WebEngine –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebEngine: {e}")
            print("üìπ –í–∏–¥–µ–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")

    def keyPressEvent(self, event: QKeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if event.key() == 16777216:  # Escape key
            if self.is_fullscreen:
                print("ü™ü –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                self.showNormal()
                self.is_fullscreen = False
            else:
                print("üñ•Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
                self.showFullScreen()
                self.is_fullscreen = True
        super().keyPressEvent(event)

    def get_base_html(self):
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                    background: #000;
                }
                html {
                    margin: 0;
                    padding: 0;
                }
            </style>
        </head>
        <body>
            <div style="width: 100vw; height: 100vh; display: flex; align-items: center; justify-content: center; color: white; font-family: Arial, sans-serif;">
                <h1>–ó–∞–≥—Ä—É–∑–∫–∞ NovelForge...</h1>
            </div>
        </body>
        </html>
        """
        return """
        <!DOCTYPE html>
        <html lang='ru'>
        <head>
            <meta charset='UTF-8'>
            <title>–ó–∞–≥—Ä—É–∑–∫–∞...</title>
            <style>
                body { font-family: Arial, sans-serif; background: #f8f8ff; color: #222; display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; }
                .loader { text-align: center; }
                .loader h1 { color: #4a90e2; margin-bottom: 0.5em; }
                .loader p { color: #888; }
            </style>
        </head>
        <body>
            <div class='loader'>
                <h1>NovelForge</h1>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</p>
            </div>
        </body>
        </html>
        """

    def load_main_url(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º URL: {self.url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.web_view.loadStarted.connect(self.on_load_started)
            self.web_view.loadFinished.connect(self.on_load_finished)
            self.web_view.loadProgress.connect(self.on_load_progress)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º URL
            self.web_view.setUrl(self.url)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ URL: {e}")

    def on_load_started(self):
        """–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    def on_load_finished(self, success):
        """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        if success:
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(3000, self.retry_load)

    def on_load_progress(self, progress):
        """–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if progress % 25 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 25%
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: {progress}%")

    def retry_load(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
        self.web_view.setUrl(self.url)

def start_music_controller():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    try:
        from bin.modules.music_controller import get_music_controller
        controller = get_music_controller()
        print("üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return controller
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ: {e}")
        return None

def main():
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        parser = argparse.ArgumentParser(description='NovelForge Runtime Engine')
        parser.add_argument('--new-project', action='store_true', 
                           help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç NovelForge')
        parser.add_argument('--only-server', action='store_true',
                           help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ GUI)')
        
        args = parser.parse_args()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if args.new_project:
            try:
                create_new_project()
                print("\nüéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python run_runtime.py")
                return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_file_path = os.path.join(CONFIG_DIR, 'runtime_conf.ini')
        if not os.path.exists(config_file_path):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file_path}")
            print("üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python run_runtime.py --new-project")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        runtime_mode = config.get('Runtime', 'mode', fallback='both').strip().lower()
        server_console = config.getboolean('Runtime', 'server_console', fallback=False)

        print("Runtime mode:", runtime_mode)
        print("Server console:", server_console)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        try:
            music_controller = start_music_controller()
            if music_controller:
                print("üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ö†Ô∏è –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")

        if runtime_mode == 'window':
            # –¢–æ–ª—å–∫–æ –æ–∫–Ω–æ
            app_qt = QApplication(sys.argv)
            window = MainWindow()
            window.show()
            sys.exit(app_qt.exec())
        elif runtime_mode == 'server':
            # –¢–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
            if server_console:
                # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
                subprocess.Popen([sys.executable, __file__, '--only-server'], creationflags=subprocess.CREATE_NEW_CONSOLE)
            else:
                run_flask()
        else:
            # –û–∫–Ω–æ + —Å–µ—Ä–≤–µ—Ä
            if server_console:
                subprocess.Popen([sys.executable, __file__, '--only-server'], creationflags=subprocess.CREATE_NEW_CONSOLE)
            else:
                flask_thread = threading.Thread(target=run_flask, daemon=True)
                flask_thread.start()
            app_qt = QApplication(sys.argv)
            window = MainWindow()
            window.show()
            sys.exit(app_qt.exec())
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        print("\nüí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == '__main__':
    if '--only-server' in sys.argv:
        try:
            run_flask()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        main() 
